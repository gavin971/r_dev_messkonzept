View(dwd_day2)
View(dwd)
View(dwd4642)
View(dwd_day2)
View(Global_all)
View(Temp_day2)
View(meteo20)
Temp_all <- cbind(Temp_all, meteo40[meteo20_time, c(8)],meteo40[meteo40_time, c(8)],meteo50[meteo50_time, c(8)])
View(Temp_all)
names(Temp_all)[2]<-"T20_t"
names(Temp_all)[3]<-"T20_b"
names(Temp_all)[4]<-"T40_t"
names(Temp_all)[5]<-"T40_b"
names(Temp_all)[6]<-"T50_t"
names(Temp_all)[7]<-"T50_b"
names(Temp_all)[8]<-"ShortIn_20"
names(Temp_all)[9]<-"ShortIn_40"
names(Temp_all)[10]<-"ShortIn_50"
View(Temp_all)
# Mitteln der Top and Bottom Fühler und in Temp_all schreiben
Temp_all$T20 <- ( Temp_all$T20_t + Temp_all$T20_b ) / 2
Temp_all$T40 <- ( Temp_all$T40_t + Temp_all$T40_b ) / 2
Temp_all$T50 <- ( Temp_all$T50_t + Temp_all$T50_b ) / 2
# Temperaturen am 2. Tag
Temp_day2 <- subset (Temp_all, Temp_all$TIMESTAMP >= as.POSIXlt("12.11.2014",format="%d.%m.%Y") & Temp_all$TIMESTAMP < as.POSIXlt("13.11.2014",format="%d.%m.%Y"))
View(Temp_day2)
Temp_all <- cbind(meteo20[meteo20_time, c(1,3,5)], meteo40[meteo40_time, c(3,5)],meteo50[meteo50_time, c(3,5)])
View(Temp_all)
Temp_all <- cbind(Temp_all, meteo40[meteo20_time, c(8)],meteo40[meteo40_time, c(8)],meteo50[meteo50_time, c(8)])
View(Temp_all)
# Rename columns
names(Temp_all)[2]<-"T20_t"
names(Temp_all)[3]<-"T20_b"
names(Temp_all)[4]<-"T40_t"
names(Temp_all)[5]<-"T40_b"
names(Temp_all)[6]<-"T50_t"
names(Temp_all)[7]<-"T50_b"
names(Temp_all)[8]<-"ShortIn_20"
names(Temp_all)[9]<-"ShortIn_40"
names(Temp_all)[10]<-"ShortIn_50"
View(Temp_all)
# Mitteln der Top and Bottom Fühler und in Temp_all schreiben
Temp_all$T20 <- ( Temp_all$T20_t + Temp_all$T20_b ) / 2
Temp_all$T40 <- ( Temp_all$T40_t + Temp_all$T40_b ) / 2
Temp_all$T50 <- ( Temp_all$T50_t + Temp_all$T50_b ) / 2
# Temperaturen am 2. Tag
Temp_day2 <- subset (Temp_all, Temp_all$TIMESTAMP >= as.POSIXlt("12.11.2014",format="%d.%m.%Y") & Temp_all$TIMESTAMP < as.POSIXlt("13.11.2014",format="%d.%m.%Y"))
View(Temp_day2)
# 2. Zeichnet ein scatter plot inklusive sinnvollen Beschriftungen
#--------------------------------------------------------------------------------------------------------
# Min Max Temp
min_temp <- min( Temp_day2$T20 )
max_temp <- max( Temp_day2$T20 )
# Min Max Radiation
min_pop <- min( Temp_day2$ShortIn_20  )
max_pop <- max( Temp_day2$ShortIn_20 )
# Diagramm vorbereiten
xrange <- c(min_temp, max_temp)
yrange <- c(min_pop, max_pop)
plot(xrange, yrange, type="p", panel.first = grid(), xaxt="n", yaxt="n", xlab=NA, ylab=NA)
# Title
title("Temperaturen und Globalstrahlung")
# Achseneinteilung, automatische Beschriftungen
xticks <- seq(min_temp:max_temp)
axis(side = 1, tck = -.015, las = 1)
axis(side = 2, tck = -.015, las = 1)
# AchsenBeschriftungen
mtext(side = 2, "Globalstrahlung in W/m^2", line = 3)
# Abbildungsbeschriftung
mtext(side = 1, "Temperatur (°C) ", line = 3)
# Plot
points(Temp_day2$T20, Temp_day2$ShortIn_20, col="red")
# 3. Berechnet die Korrelation zwischen Temperatur und Globalstrahlung
#--------------------------------------------------------------------------------------------------------
cor(muecken)
cor(Temp_day2$T20,Temp_day2$ShortIn_20)
# Lineare Regression
#--------------------------------------------------------------------------------------------------------
linreg <- lm(Temp_day2$ShortIn_20 ~ Temp_day2$T20)
summary(linreg)
# In Diagramm eintragen
abline(linreg, col = "red", lwd=2)
# Legende
r2 <- round((cor(Temp_day2$T20,Temp_day2$ShortIn_20))^2, 2)
legend("topleft",legend=paste("R2 = ", r2) )
R.Version()
legend("topleft",legend=c(paste("r2 20 = ", r2), "40", "50"), col=c("black","gray","blue"),lty=1 )
#----------------------------------------------------------------------------------------------
# Description: Looking at Temperature, global radiation correlation
#
# Script to paper by Langanki, Schulz 2015
# R version 3.1.2 (2014-10-31), RStudio 0.98.1103
#
# Last modified: 22.05.2015
# Package dependencies:
# FGClimatology
#
# Contact: schulz.1@campus.tu-berlin.de
#----------------------------------------------------------------------------------------------
# 2. Zeichnet ein scatter plot inklusive sinnvollen Beschriftungen
#--------------------------------------------------------------------------------------------------------
# Min Max Temp
min_temp <- min( Temp_day2$T20 )
max_temp <- max( Temp_day2$T20 )
# Min Max Radiation
min_rad <- min( Temp_day2$ShortIn_20  )
max_rad <- max( Temp_day2$ShortIn_20 )
# Diagramm vorbereiten
xrange <- c(min_temp, max_temp)
yrange <- c(min_rad, max_rad)
plot(xrange, yrange, type="p", panel.first = grid(), xaxt="n", yaxt="n", xlab=NA, ylab=NA)
# Title
title("Temperaturen ~ Globalstrahlung an Messstationen")
# Achseneinteilung, automatische Beschriftungen
xticks <- seq(min_temp:max_temp)
axis(side = 1, tck = -.015, las = 1)
axis(side = 2, tck = -.015, las = 1)
# AchsenBeschriftungen
mtext(side = 2, "Globalstrahlung in W/m^2", line = 3)
# Abbildungsbeschriftung
mtext(side = 1, "Temperatur (°C) ", line = 3)
# Plot
points(Temp_day2$T20, Temp_day2$ShortIn_20, col="black")
points(Temp_day2$T40, Temp_day2$ShortIn_40, col="gray")
points(Temp_day2$T50, Temp_day2$ShortIn_50, col="blue")
legend("bottomright",legend=c("20", "40", "50"), col=c("black","gray","blue"),lty=1 )
# 3. Berechnet die Korrelation zwischen Temperatur und Globalstrahlung
#--------------------------------------------------------------------------------------------------------
cor(Temp_day2$T20,Temp_day2$ShortIn_20)
# Lineare Regression
#--------------------------------------------------------------------------------------------------------
linreg20 <- lm(Temp_day2$ShortIn_20 ~ Temp_day2$T20)
linreg40 <- lm(Temp_day2$ShortIn_40 ~ Temp_day2$T40)
linreg50 <- lm(Temp_day2$ShortIn_50 ~ Temp_day2$T50)
summary(linreg20)
# In Diagramm eintragen
abline(linreg20, col = "black", lwd=2)
abline(linreg40, col = "gray", lwd=2)
abline(linreg50, col = "blue", lwd=2)
# Legende
r2_20 <- round((cor(Temp_day2$T20,Temp_day2$ShortIn_20))^2, 2)
r2_40 <- round((cor(Temp_day2$T40,Temp_day2$ShortIn_40))^2, 2)
r2_50 <- round((cor(Temp_day2$T50,Temp_day2$ShortIn_50))^2, 2)
legend("topleft",legend=c(paste("r2 20 = ", r2_20), ("r2 40 = ", r2_50), ("r2 50 = ", r2_50)), col=c("black","gray","blue"),lty=1 )
legend("bottomright",legend=c("20", "40", "50"), col=c("black","gray","blue"),lty=1 )
legend("topleft",legend=c(paste("r2 20 = ", r2_20), ("r2 40 = ", r2_50), ("r2 50 = ", r2_50)), col=c("black","gray","blue"),lty=1 )
legend("topleft",legend=c(paste("r2 20 = ", r2_20), paste("r2 40 = ", r2_50), paste("r2 50 = ", r2_50)), col=c("black","gray","blue"),lty=1 )
plot(xrange, yrange, type="p", panel.first = grid(), xaxt="n", yaxt="n", xlab=NA, ylab=NA)
# Title
title("Temperaturen ~ Globalstrahlung an Messstationen")
# Achseneinteilung, automatische Beschriftungen
xticks <- seq(min_temp:max_temp)
axis(side = 1, tck = -.015, las = 1)
axis(side = 2, tck = -.015, las = 1)
# AchsenBeschriftungen
mtext(side = 2, "Globalstrahlung in W/m^2", line = 3)
# Abbildungsbeschriftung
mtext(side = 1, "Temperatur (°C) ", line = 3)
# Plot
points(Temp_day2$T20, Temp_day2$ShortIn_20, col="black")
points(Temp_day2$T40, Temp_day2$ShortIn_40, col="gray")
points(Temp_day2$T50, Temp_day2$ShortIn_50, col="blue")
legend("bottomright",legend=c("20", "40", "50"), col=c("black","gray","blue"),lty=1 )
# 3. Berechnet die Korrelation zwischen Temperatur und Globalstrahlung
#--------------------------------------------------------------------------------------------------------
cor(Temp_day2$T20,Temp_day2$ShortIn_20)
# Lineare Regression
linreg20 <- lm(Temp_day2$ShortIn_20 ~ Temp_day2$T20)
#--------------------------------------------------------------------------------------------------------
linreg40 <- lm(Temp_day2$ShortIn_40 ~ Temp_day2$T40)
linreg50 <- lm(Temp_day2$ShortIn_50 ~ Temp_day2$T50)
summary(linreg20)
# In Diagramm eintragen
abline(linreg20, col = "black", lwd=2)
abline(linreg40, col = "gray", lwd=2)
abline(linreg50, col = "blue", lwd=2)
# Legende
r2_20 <- round((cor(Temp_day2$T20,Temp_day2$ShortIn_20))^2, 2)
r2_40 <- round((cor(Temp_day2$T40,Temp_day2$ShortIn_40))^2, 2)
r2_50 <- round((cor(Temp_day2$T50,Temp_day2$ShortIn_50))^2, 2)
legend("topleft",legend=c(paste("r2 20 = ", r2_20), paste("r2 40 = ", r2_50), paste("r2 50 = ", r2_50)), col=c("black","gray","blue"),lty=1 )
#################################################################################
#
# This file drives all subscripts and should ideally make the whole code available
#################################################################################
#
# Config the project
# Check directory
directory <- getwd()
# set paths
path.plots <- "plots"
path.data <- "data"
path.code <- "code"
# Load subscripts
source("code/load.libraries.R")
source("code/load.data.R")
source("code/temp_radiation.regression.R")
g
# Description: Looking at Temperature, global radiation correlation
#
# Script to paper by Langanki, Schulz 2015
# R version 3.1.2 (2014-10-31), RStudio 0.98.1103
#
# Last modified: 22.05.2015
# Package dependencies:
# FGClimatology
#
# Contact: schulz.1@campus.tu-berlin.de
#----------------------------------------------------------------------------------------------
# 2. Zeichnet ein scatter plot inklusive sinnvollen Beschriftungen
#--------------------------------------------------------------------------------------------------------
# Min Max Temp
min_temp <- min( Temp_day2$T20 )
max_temp <- max( Temp_day2$T20 )
# Min Max Radiation
min_rad <- min( Temp_day2$ShortIn_20  )
max_rad <- max( Temp_day2$ShortIn_20 )
# Diagramm vorbereiten
xrange <- c(min_temp, max_temp)
yrange <- c(min_rad, max_rad)
plot(xrange, yrange, type="p", panel.first = grid(), xaxt="n", yaxt="n", xlab=NA, ylab=NA)
# Title
title("Temperaturen ~ Globalstrahlung an Messstationen")
# Achseneinteilung, automatische Beschriftungen
xticks <- seq(min_temp:max_temp)
axis(side = 1, tck = -.015, las = 1)
axis(side = 2, tck = -.015, las = 1)
# AchsenBeschriftungen
mtext(side = 2, "Globalstrahlung in W/m^2", line = 3)
# Abbildungsbeschriftung
mtext(side = 1, "Temperatur (°C) ", line = 3)
# Plot
points(Temp_day2$T20, Temp_day2$ShortIn_20, col="black")
points(Temp_day2$T40, Temp_day2$ShortIn_40, col="gray")
points(Temp_day2$T50, Temp_day2$ShortIn_50, col="blue")
legend("bottomright",legend=c("20", "40", "50"), col=c("black","gray","blue"),lty=1 )
# 3. Berechnet die Korrelation zwischen Temperatur und Globalstrahlung
#--------------------------------------------------------------------------------------------------------
cor(Temp_day2$T20,Temp_day2$ShortIn_20)
# Lineare Regression
linreg20 <- lm(Temp_day2$ShortIn_20 ~ Temp_day2$T20)
#--------------------------------------------------------------------------------------------------------
linreg40 <- lm(Temp_day2$ShortIn_40 ~ Temp_day2$T40)
linreg50 <- lm(Temp_day2$ShortIn_50 ~ Temp_day2$T50)
summary(linreg20)
# In Diagramm eintragen
abline(linreg20, col = "black", lwd=2)
abline(linreg40, col = "gray", lwd=2)
abline(linreg50, col = "blue", lwd=2)
# Legende
r2_20 <- round((cor(Temp_day2$T20,Temp_day2$ShortIn_20))^2, 2)
r2_40 <- round((cor(Temp_day2$T40,Temp_day2$ShortIn_40))^2, 2)
r2_50 <- round((cor(Temp_day2$T50,Temp_day2$ShortIn_50))^2, 2)
legend("topleft",legend=c(paste("r2 20 = ", r2_20), paste("r2 40 = ", r2_50), paste("r2 50 = ", r2_50)), col=c("black","gray","blue"),lty=1 )
# Min Max Temp
min_temp <- min( Temp_day2$T20 )
max_temp <- max( Temp_day2$T20 )
# Min Max Radiation
min_rad <- min( Temp_day2$ShortIn_20  )
max_rad <- max( Temp_day2$ShortIn_20 )
# Diagramm vorbereiten
xrange <- c(min_temp, max_temp)
yrange <- c(min_rad, max_rad)
plot(xrange, yrange, type="p", panel.first = grid(), xaxt="n", yaxt="n", xlab=NA, ylab=NA)
# Title
title("Temperaturen ~ Globalstrahlung an Messstationen")
# Achseneinteilung, automatische Beschriftungen
xticks <- seq(min_temp:max_temp)
axis(side = 1, tck = -.015, las = 1)
axis(side = 2, tck = -.015, las = 1)
# AchsenBeschriftungen
mtext(side = 2, "Globalstrahlung in W/m^2", line = 3)
# Abbildungsbeschriftung
mtext(side = 1, "Temperatur (°C) ", line = 3)
# Plot
points(Temp_day2$T20, Temp_day2$ShortIn_20, col="black")
points(Temp_day2$T40, Temp_day2$ShortIn_40, col="gray")
points(Temp_day2$T50, Temp_day2$ShortIn_50, col="blue")
# 3. Berechnet die Korrelation zwischen Temperatur und Globalstrahlung
#--------------------------------------------------------------------------------------------------------
cor(Temp_day2$T20,Temp_day2$ShortIn_20)
# Lineare Regression
linreg20 <- lm(Temp_day2$ShortIn_20 ~ Temp_day2$T20)
linreg40 <- lm(Temp_day2$ShortIn_40 ~ Temp_day2$T40)
#--------------------------------------------------------------------------------------------------------
linreg50 <- lm(Temp_day2$ShortIn_50 ~ Temp_day2$T50)
summary(linreg20)
# In Diagramm eintragen
abline(linreg20, col = "black", lwd=2)
abline(linreg40, col = "gray", lwd=2)
abline(linreg50, col = "blue", lwd=2)
# Legende
r2_20 <- round((cor(Temp_day2$T20,Temp_day2$ShortIn_20))^2, 2)
r2_40 <- round((cor(Temp_day2$T40,Temp_day2$ShortIn_40))^2, 2)
r2_50 <- round((cor(Temp_day2$T50,Temp_day2$ShortIn_50))^2, 2)
legend("topleft",legend=c(paste("r2 20 = ", r2_20), paste("r2 40 = ", r2_50), paste("r2 50 = ", r2_50)), col=c("black","gray","blue"),lty=1 )
legend("topleft",legend=c(paste("Station 20: r2 = ", r2_20), paste("Station 40: r2 = ", r2_50), paste("Station 50: r2 = ", r2_50)), col=c("black","gray","blue"),lty=1 )
legend("topleft",legend=c(paste("Station 20: r2 = ", r2_20), paste("Station 40: r2 =", r2_50), paste("Station 50: r2 = ", r2_50)), col=c("black","gray","blue"),lty=1 )
legend("topleft",legend=c(paste("Station 20: r2 =", r2_20), paste("Station 40: r2 =", r2_50), paste("Station 50: r2 =", r2_50)), col=c("black","gray","blue"),lty=1 )
source("code/temp_radiation.regression.R")
# Save to plots
dev.copy2pdf(file = "plots/temp_radiation.regression.pdf")
jpeg(file = "plots/temp_radiation.regression.jpg")
min( Temp_day2$ShortIn_20  )
?is.finite()
#
# Script to paper by Langanki, Schulz 2015
# R version 3.1.2 (2014-10-31), RStudio 0.98.1103
#
# Last modified: 22.05.2015
# Package dependencies:
# FGClimatology
#
# Contact: schulz.1@campus.tu-berlin.de
#----------------------------------------------------------------------------------------------
summary(Temp_day2)
#----------------------------------------------------------------------------------------------
# Mindestwerte am Tag 2
#----------------------------------------------------------------------------------------------
# Vector position
min_20_row <- which.min(Temp_day2[,8])
min_20 <- Temp_day2[min_20_row,]
min_20_temp <- min(Temp_day2[,8])
min_40_row <- which.min(Temp_day2[,9])
min_40 <- Temp_day2[min_40_row,]
min_40_temp <- min(Temp_day2[,9])
min_50_row <- which.min(Temp_day2[,10])
min_50 <- Temp_day2[min_50_row,]
min_50_temp <- min(Temp_day2[,10])
min_dwd_row <- which.min(dwd_day2[,2])
min_dwd <- dwd_day2[min_dwd_row,]
min_dwd_temp <- min(dwd_day2[,2])
min_values <- c ( min_20_temp, min_40_temp, min_50_temp, min_dwd_temp )
#----------------------------------------------------------------------------------------------
# The same goes for max values
#----------------------------------------------------------------------------------------------
max_20_row <- which.max(Temp_day2[,8])
max_20 <- Temp_day2[max_20_row,]
max_20_temp <- max(Temp_day2[,8])
max_40_row <- which.max(Temp_day2[,9])
max_40 <- Temp_day2[max_40_row,]
max_40_temp <- max(Temp_day2[,9])
max_50_row <- which.max(Temp_day2[,10])
max_50 <- Temp_day2[max_50_row,]
max_50_temp <- max(Temp_day2[,10])
max_dwd_row <- which.max(dwd_day2[,2])
max_dwd <- dwd_day2[max_dwd_row,]
max_dwd_temp <- max(dwd_day2[,2])
max_values <- c (max(Temp_day2[,8]),max(Temp_day2[,9]),max(Temp_day2[,10]),max(dwd_day2[,2]))
# define row and column titles
mrownames = spl('min temp,max temp,row 3')
mcolnames = spl('col 1,col 2,col 3,col 4')
?spl
source("code/load.libraries.R")
mrownames = spl('min temp,max temp,row 3')
mcolnames = spl('col 1,col 2,col 3,col 4')
mrownames = split('min temp,max temp,row 3')
temp = matrix(NA, len(mrownames), len(mcolnames))
rownames(temp) = mrownames
setInternet2(TRUE)
source(gzcon(url('https://github.com/systematicinvestor/SIT/raw/master/sit.gz', 'rb')))
install.packages(c("Systematic", "Investor", "Toolbox"))
str(Temp_all)
summary(Temp_day2)
View(meteo40)
View(meteo50)
Temp_all <- cbind(meteo20[meteo20_time, c(1,3,5)], meteo40[meteo40_time, c(3,5)],meteo50[meteo50_time, c(3,5)])
Temp_all <- cbind(Temp_all, meteo20[meteo20_time, c(8)],meteo40[meteo40_time, c(8)],meteo50[meteo50_time, c(8)])
# Rename columns
names(Temp_all)[2]<-"T20_t"
names(Temp_all)[3]<-"T20_b"
names(Temp_all)[4]<-"T40_t"
names(Temp_all)[5]<-"T40_b"
names(Temp_all)[6]<-"T50_t"
names(Temp_all)[7]<-"T50_b"
names(Temp_all)[8]<-"ShortIn_20"
names(Temp_all)[9]<-"ShortIn_40"
names(Temp_all)[10]<-"ShortIn_50"
# Mitteln der Top and Bottom Fühler und in Temp_all schreiben
Temp_all$T20 <- ( Temp_all$T20_t + Temp_all$T20_b ) / 2
Temp_all$T40 <- ( Temp_all$T40_t + Temp_all$T40_b ) / 2
Temp_all$T50 <- ( Temp_all$T50_t + Temp_all$T50_b ) / 2
# Temperaturen am 2. Tag
Temp_day2 <- subset (Temp_all, Temp_all$TIMESTAMP >= as.POSIXlt("12.11.2014",format="%d.%m.%Y") & Temp_all$TIMESTAMP < as.POSIXlt("13.11.2014",format="%d.%m.%Y"))
#################################################################################
#
# Daten Wind
# Einlesen der Stationen im Mörickeluch
wind20 <- read.logger("data/Messung_Moerickeluch_Nov2014/CR800_20_Wind.dat")
wind40 <- read.logger("data/Messung_Moerickeluch_Nov2014/CR800_40_Wind.dat")
wind50 <- read.logger("data/Messung_Moerickeluch_Nov2014/CR800_50_Wind.dat")
# Vorprozessierung - falsches Datum
wind20 <- wind20[-(1:6),]
wind40 <- wind40[-(1:38),]
wind50 <- wind50[-c(1,2675:2678),]
# Wind: gemeinsame startzeitpunkte/endzeitpunkte herausfinden
wind_min_time <- max( c( min(wind20$ TIMESTAMP), min(wind40$ TIMESTAMP), min(wind50$ TIMESTAMP) ) )
wind_max_time <- min( c( max(wind20$ TIMESTAMP), max(wind40$ TIMESTAMP), max(wind50$ TIMESTAMP) ) )
# der common_timestamp hilft als gemeinsamer timestamp aller Daten
wind_common_timestamp <- as.POSIXlt(seq(wind_min_time,wind_max_time, units="minutes", by=60))
# 1. Einlesen/Vorprozessierung der DWD-Daten Wind
#################################################################################
dwd_wind <- read.table("data/DWD/Seehausen/stundenwerte_FF_04642_akt/produkt_wind_Terminwerte_20131206_20150105_04642.txt", header = TRUE, sep = ";", dec = ".", na.strings = "NA")
# Vorprozessierung: unnötige Spalten
dwd_wind4642 <- dwd_wind[,c(2,5,6)]
# Vorprozessierung: Umwandlung in Date-Time-Format
dwd_wind4642$ Mess_Datum <- strptime(dwd_wind4642$Mess_Datum, tz = "UTC", format="%Y%m%d%H")
# Vorprozessierung: Beschränkung auf Messzeitraum
dwd_wind4642_cut <- dwd_wind4642[dwd_wind4642$ Mess_Datum >= wind_min_time & dwd_wind4642$Mess_Datum <= wind_max_time,]
#################################################################################
#
# Daten Globalstrahlung
# Sonnenscheindauer (Strahlung > 0)
global20 <-meteo20$ShortIn > "0"
global40 <-meteo40$ShortIn > "0"
global50 <-meteo50$ShortIn > "0"
# Global_all beinhaltet TIMESTAMP und alle ShortIn
Global_all <- cbind(meteo20[meteo20_time, c(1,8)], meteo40[meteo40_time, c(8)],meteo50[meteo50_time, c(8)])
# Rename columns
names(Global_all)[2]<-"ShortIn20"
names(Global_all)[3]<-"ShortIn40"
names(Global_all)[4]<-"ShortIn50"
#----------------------------------------------------------------------------------------------
# DWD Globalstrahlung
#----------------------------------------------------------------------------------------------
dwd_global4642 <- read.table("data/DWD/Seehausen/stundenwerte_ST_04642/produkt_strahlung_Stundenwerte_19910101_20150331_04642.txt", header = TRUE, sep = ";", dec = ".", na.strings = "NA")
summary(dwd_global4642)
# Vorprozessierung: unnötige Spalten
dwd_global4642 <- dwd_global[,c(1,2,6)]
# Vorprozessierung: Umwandlung in Date-Time-Format
dwd_global4642$ MESS_DATUM <- strptime(dwd_global4642$MESS_DATUM, tz = "UTC", format="%Y%m%d%H")
# Vorprozessierung: Beschränkung auf Messzeitraum
dwd_global4642 <- dwd_global4642[dwd_global4642$ MESS_DATUM >= min_time & dwd_global4642$MESS_DATUM <= max_time,]
# Vorprozessieren: Umrechen von Joule/cm2 in W/m2
dwd_global4642$GLOBAL_W_M2 <- dwd_global4642$GLOBAL_KW_J
#----------------------------------------------------------------------------------------------
# Description: Looking at Temperature, global radiation correlation
#
# Script to paper by Langanki, Schulz 2015
# R version 3.1.2 (2014-10-31), RStudio 0.98.1103
#
# Last modified: 22.05.2015
# Package dependencies:
# FGClimatology
#
# Contact: schulz.1@campus.tu-berlin.de
#----------------------------------------------------------------------------------------------
# 2. Zeichnet ein scatter plot inklusive sinnvollen Beschriftungen
#--------------------------------------------------------------------------------------------------------
# Min Max Temp
min_temp <- min( Temp_day2$T20 )
max_temp <- max( Temp_day2$T20 )
# Min Max Radiation
min_rad <- min( Temp_day2$ShortIn_20  )
max_rad <- max( Temp_day2$ShortIn_20 )
# Diagramm vorbereiten
xrange <- c(min_temp, max_temp)
yrange <- c(min_rad, max_rad)
plot(xrange, yrange, type="p", panel.first = grid(), xaxt="n", yaxt="n", xlab=NA, ylab=NA)
# Title
title("Temperaturen ~ Globalstrahlung an Messstationen")
# Achseneinteilung, automatische Beschriftungen
xticks <- seq(min_temp:max_temp)
axis(side = 1, tck = -.015, las = 1)
axis(side = 2, tck = -.015, las = 1)
# AchsenBeschriftungen
mtext(side = 2, "Globalstrahlung in W/m^2", line = 3)
# Abbildungsbeschriftung
mtext(side = 1, "Temperatur (°C) ", line = 3)
# Plot
points(Temp_day2$T20, Temp_day2$ShortIn_20, col="black")
points(Temp_day2$T40, Temp_day2$ShortIn_40, col="gray")
points(Temp_day2$T50, Temp_day2$ShortIn_50, col="blue")
# 3. Berechnet die Korrelation zwischen Temperatur und Globalstrahlung
#--------------------------------------------------------------------------------------------------------
cor(Temp_day2$T20,Temp_day2$ShortIn_20)
# Lineare Regression
#--------------------------------------------------------------------------------------------------------
linreg20 <- lm(Temp_day2$ShortIn_20 ~ Temp_day2$T20)
linreg40 <- lm(Temp_day2$ShortIn_40 ~ Temp_day2$T40)
linreg50 <- lm(Temp_day2$ShortIn_50 ~ Temp_day2$T50)
summary(linreg20)
# In Diagramm eintragen
abline(linreg20, col = "black", lwd=2)
abline(linreg40, col = "gray", lwd=2)
abline(linreg50, col = "blue", lwd=2)
# Legende
r2_20 <- round((cor(Temp_day2$T20,Temp_day2$ShortIn_20))^2, 2)
r2_40 <- round((cor(Temp_day2$T40,Temp_day2$ShortIn_40))^2, 2)
r2_50 <- round((cor(Temp_day2$T50,Temp_day2$ShortIn_50))^2, 2)
legend("topleft",legend=c(paste("Station 20: r2 =", r2_20), paste("Station 40: r2 =", r2_50), paste("Station 50: r2 =", r2_50)), col=c("black","gray","blue"),lty=1 )
# Save to plots
dev.copy2pdf(file = "plots/temp_radiation.regression.pdf")
jpeg(file = "plots/temp_radiation.regression.jpg")
summary(Temp_day2)
#--------------------------------------------------------------------------------------------------------
linreg20 <- lm(Temp_day2$ShortIn_20 ~ Temp_day2$T20)
linreg40 <- lm(Temp_day2$ShortIn_40 ~ Temp_day2$T40)
linreg50 <- lm(Temp_day2$ShortIn_50 ~ Temp_day2$T50)
summary(linreg20)
# In Diagramm eintragen
abline(linreg20, col = "black", lwd=2)
abline(linreg40, col = "gray", lwd=2)
abline(linreg50, col = "blue", lwd=2)
# Legende
r2_20 <- round((cor(Temp_day2$T20,Temp_day2$ShortIn_20))^2, 2)
r2_40 <- round((cor(Temp_day2$T40,Temp_day2$ShortIn_40))^2, 2)
r2_50 <- round((cor(Temp_day2$T50,Temp_day2$ShortIn_50))^2, 2)
legend("topleft",legend=c(paste("Station 20: r2 =", r2_20), paste("Station 40: r2 =", r2_50), paste("Station 50: r2 =", r2_50)), col=c("black","gray","blue"),lty=1 )
# Save to plots
dev.copy2pdf(file = "plots/temp_radiation.regression.pdf")
jpeg(file = "plots/temp_radiation.regression.jpg")
